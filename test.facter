define multiple package($names) {
	exec { "apt-get -y $namesStr": }
	$namesStr = implode($names, " ")
}

facter multiple package($names) {
	$namesWithPipes = implode($names, "|")
	$installed = exec { "dpkg -l | grep ^ii | awk '{ print $2 }' | grep -P '^$namesWithPipes$'": }
	
	return $names - $installed
}

define single file($name, $content = "") {
	parallel
	
	exec { "cat > $name":
		stdin => $content,
	}
}

facter single file($name, $content = "") {
	$filesize = exec { "ls -s $name": }
	$expectedFilesize = len($content)
	
	$md5 = exec { "md5sum $name":
		unless => $filesize != $expectedFilesize,
	}
	$contentMd5 = md5sum($content)
	
	return $filesize == $expectedFilesize && $md5 == $contentMd5
}


facter single file($name, $content = "") {
	$filesize = exec { "ls -s $name": }
	$expectedFilesize = len($content)

	if $filesize == $expectedFilesize {
		$md5 = exec { "md5sum $name":
			unless => $filesize != $expectedFilesize,
		}
		$contentMd5 = md5sum($content)
		
		return $md5 == $contentMd5
	} else {
		return false
	}
}

// Defines which use exec needs a facter (how would we otherwise know whether
// the define is already fullfilled?). 
define single configfile($name, $key, $val) {
	// mosa will detect the following line and require a facter for the type
	exec { "echo '$key = $val' > $name": }
}

facter single configfile($name, $key, $val) {
	$content = exec { "cat $name": }
	
	return $content == "$key = $val"
}

// Defines which are composed of other defines doesn't need facters. Instead,
// the facters of the types declared inside the define will be used. It is
// however prefectly fine to still supply a facter in these cases.
define single configfilewithprefix($name, $prefix, $key, $val) {
	// This declaration references another define, so we don't need a facter for
	// configfilewithprefix.
	configfile { $name:
		key => "$prefix-$key",
		val => $val,
	}
}

// What about this? It needs a separate facter for the exec?
define single configfileandbinpkg($name, $configKey, $configVal) {
	configfile { "/etc/$name/config.conf":
		key => $configKey,
		val => $configVal,
	}
	
	exec { "wget -O /usr/bin/$name/ http://buildserver.local/$name": }
}



// Functions. $localState from the class/define realizing the function is
// automatically sent along. This is useful for instance when creating a
// template function, so that the variables in the define may be used in the
// template.
func template($localState, $templateFilename) {
	return exec { "mytemplateengine $templateFilename":
		stdin => json($localState),
	}
}

// Maybe exec is a function?
// But that would be problematic... our function calls are no longer
// deterministic. If exec is a define/realization, a separate facter for each
// exec is required, giving a more predictable result.
func template($localState, $templateFilename) {
	return exec("mytemplateengine $templateFilename", [
		stdin => json($localState),
	])
}

// Switch statements
// Defaults?
define single service($name, $ensure,) {
	switch $ensure {
		case "running": exec { "service $name start": }
		case "stopped": exec { "service $name stop": }
	}
}

facter single service($name, $ensure,) {
	$status = exec { "service $name status": }

	switch $ensure {
		case "running": return $status == "started"
		case "stopped": return $status == "stopped"
	}
}

class c($val) {
	switch $val {
		case "foo": $baz = "fooVal"
		case "bar": $baz = "barVal"
	}
}










